安装git的步骤省略
1 安装完成后需要做一些简单的配置。
    git config --global user.name "Your Name"
    git config --global user.email "email@example.com"
2 创建版本库：在一个合适的目录下（空目录，或者代码的目录），通过 git init 命令把这个目录变成Git可以管理的仓库。
    .git目录（即版本库，是一个隐藏目录），是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件。
3 把文件添加到版本库。
    以readme.txt文件为例，需要以下命令：
    git add readme.txt    ／／ add 的作用是把文件添加到暂存区中。add 后面可以跟具体的文件名，也可以跟 . 或者-A 添加该目录下所有文件。
    git commit -m "wrote a readme file"  ／／ commit 的作用是把暂存区中的文件，全部提交到版本库（本地仓库）中。-m 是必选命令，后面跟 注释。
4 查看版本库状态：用 git status 命令。一般有四个状态：
        （1）Untracked files。未跟踪文件。一般是新建的文件，版本库中没有该文件。
        （2）Changes not staged for commit。已修改（未添加）未提交。版本库中有该文件，但是经过修改后，没有添加到暂存区中，也就不可能提交。
        （3）Changes to be committed。修改将被提交。文件已添加到暂存区中，输入 commit 命令就可以提交。
        （4）nothing to commit, working tree clean。工作区已清空。这里的意思是版本库的文件现在已经和工作区一致，且暂存区没有文件，提交命令后的状态。
  使用 git diff 命令可以查看当前工作区的文件与版本库中的文件有何不同。添加文件参数，如： git diff [file] 可查看具体的文件有何不同（做了哪些修改）。
5 查看 commit 操作的历史记录：使用 git log 命令。如下：
    commit 3069e3cc78e4d6b3fb8eda0f7e7c85d248829e3d
    Author: COMKF <1943336161@qq.com>
    Date:   Tue Jun 27 16:45:53 2017 +0800

        a litter change

    commit b8856058bef18b7c96edb4219508e7556b4b809c
    Author: COMKF <1943336161@qq.com>
    Date:   Tue Jun 27 16:37:12 2017 +0800

        change

    commit 815543644914664fa8defb8b4a217a6f47086e38
    Author: COMKF <1943336161@qq.com>
    Date:   Tue Jun 27 16:11:23 2017 +0800

        just a note

    commit f4e9e5c7a71404897358f1bd477de664d56975d4
    Author: 叶孟豪 <1943336161@qq.com>
    Date:   Tue Jun 27 16:09:06 2017 +0800

        Create README.md

    git log命令显示从最近到最远的提交日志。而且可以看到每一次的注释，因此，写一个有意义的注释，是非常方便我们进行代码管理的。
    每一次commit的操作，都会生成一个commit ID，如3069e3cc78e4d6b3fb8eda0f7e7c85d248829e3d。
6 既然是git可以进行版本管理，那么我们如何返回上一个版本呢？它的原理又是什么呢？
  在Git中，用 HEAD（相当于指针）表示当前版本，也就是最新的提交3069e3c....。上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然也可以写作HEAD~2。
  退回上一个版本，就需要用到命令：git reset --hard HEAD^。（--hard参数是可选可不选的，当然也有其他的参数。以后介绍）
  使用版本号，也可以达到相同的效果：git reset --hard 3069e3c。（版本号没必要写全，前几位就可以了，Git会自动去找。）
  这样做，可以让我们直接在版本之间跳跃，它的意义在于，可以让我们从旧版本再返回到最新的版本中。
7 查看所有命令操作的历史记录：使用 git reflog 命令。不再展示，它可以显示任何一个版本的commit ID，然后使用6中的命令让我们在各版本中跳跃。
    在这里小结一下。版本库中记录了每一次提交时的版本，以及生成一个commit ID作为标识。
    reset命令的作用，就是把版本库中的（我们需要的）版本再恢复到工作区（根据commit ID 或 HEAD指针）。
8 使用 git checkout -- file 命令丢弃工作区的修改。要分两种情况：
    （1）一种是文件自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态。（让工作区的文件与版本库中的一致）
    （2）一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。（让工作区的文件与暂存区中的一致）
  注意：git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。
9 但是呢，当我们把文件添加到暂存区后，发现我们也不想要暂存区的文件，而是直接想要恢复称版本库中的文件，怎么办？
    使用git reset HEAD [file]，可以把暂存区的文件撤销掉，并且重新放回工作区。
    git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
  小提示：先用9的命令，然后用8的命令。
10 删除版本库中的文件，使用： git rm [file] 和 git commit -m "remove test.txt" 两个命令共同完成。
    如果我们误删了工作区中的文件，可以使用 git checkout -- file 进行恢复。
    可以看出，reset命令于版本级别，checkout -- file 命令作用于文件级别。没必要因为恢复一个文件，返回上一个版本。

11 远程仓库：github。添加SSH密匙和搭建远程仓库看教程即可。
    关联远程仓库命令：git remote add origin [git@github.com:michaelliao/learngit.git]。 ／／该仓库必须事先搭建好。
    然后我们可以使用 git remote -v，查看关联的仓库。
12 第一次从本地仓库向远程仓库推送时：需要使用 git push -u origin master 命令，之后只要用 git push origin master 即可。
    也可以使用 git pull origin master，从远程仓库下载到本地仓库。
13 使用 git clone [git@github.com:michaelliao/learngit.git] 直接把仓库中的所有内容克隆下来（用于多人开发）。

14 重点：创建与合并分支。
    在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。目前只有一条时间线，叫主分支，就是master。
    HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。
    当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上。
    从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
    假如我们在dev上的工作完成了，就可以把dev合并到master上。最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。（事实上情况要复杂的多）

    创建dev分支，然后切换到dev分支：使用 git checkout -b dev 命令。
    git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：git branch dev（创建分支） 和 git checkout dev（切换分支）。
    小提示：可使用 git branch 命令查看当前分支。 git branch 命令会列出所有分支，当前分支前面会标一个*号。
    进行一些操作后回到master分支：使用 git checkout master 命令。（此时文件会回到操作前的状态，因为这些操作是在dev分支上进行的。）
    使用 git merge dev 命令合并dev分支上的工作成果。（当然，还有其他的合并方法。）
    使用 git branch -d dev 命令删除dev分支。（此时再用 git branch 命令查看分支，就只有master分支了）

15 重点：解决冲突
    





